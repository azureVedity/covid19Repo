{
	"name": "ecdc_covid_cases_exploration",
	"properties": {
		"content": {
			"query": "SELECT TOP 100 *\nFROM OPENROWSET (BULK 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/latest/ecdc_cases.parquet',FORMAT = 'PARQUET') AS [result]\n\n\nCREATE EXTERNAL DATA SOURCE ecdc_cases WITH (\n    LOCATION = 'https://pandemicdatalake.blob.core.windows.net/public/curated/covid-19/ecdc_cases/'\n);\n\n\nCREATE EXTERNAL FILE FORMAT ParquetFormat WITH (  FORMAT_TYPE = PARQUET );\n\ncreate schema ecdc\n\ngo\n\ncreate external table ecdc.cases (\n    date_rep        date,\n    day    smallint,\n    month             smallint,\n    year  smallint,\n    cases smallint,\n    deaths            smallint,\n    countries_and_territories       varchar(8000),\n    geo_id             varchar(8000),\n    country_territory_code           varchar(8000),\n    pop_data_2018           int,\n    continent_exp             varchar(8000),\n    load_date      datetime2(7),\n    iso_country   varchar(8000)\n) with (\n    data_source= ecdc_cases,\n    location = 'latest/ecdc_cases.parquet',\n    file_format = ParquetFormat\n);\nGO\n\n\n\nselect max(date_rep) from  ecdc.cases as a\n\n--select * from ecdc.cases where continent_exp like '%otal%'\n\nselect continent = ISNULL(continent_exp, 'Total'), cases = sum(cases), deaths = sum(deaths)\nfrom  ecdc.cases as a\ngroup by continent_exp \norder by sum(cases) desc\n\nselect top 11 a.countries_and_territories,a.year, a.cases,a.deaths  \nfrom (\nselect countries_and_territories = ISNULL(countries_and_territories, 'Total'), cases = sum(cases), deaths = sum(deaths),'2020' as year\nfrom  ecdc.cases \nwhere date_rep < '2020-12-31'\ngroup by countries_and_territories \n) as a\norder by cases desc\n\nselect concat(year,'-',month) monthName, cases = sum(cases), deaths = sum(deaths)\nfrom ecdc.cases as a\nwhere geo_id = 'IN'\ngroup by concat(year,'-',month)\norder by concat(year,'-',month)\n\nselect  DATE_REP, CASES,\n        CASES_AVG = AVG(CASES) OVER(order by date_rep ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING  )\nfrom ecdc.cases as a\nwhere geo_id = 'IN' order by date_rep\n\nselect DATE_REP, CASES,\n        CUMULATIVE = SUM(CASES) OVER (ORDER BY date_rep)\nfrom ecdc.cases as a\nwhere geo_id = 'IN'\norder by date_rep\n\n\n\nselect top 50  *\nfrom ecdc.cases as a;\n\nselect  TOP 10 date_rep, countries_and_territories,\n        cases,\n        prev = LAG(CASES, 7) OVER(partition by geo_id order by date_rep )\nfrom ecdc.cases as a\norder by date_rep desc;\nGO\n\nselect  TOP 10 date_rep, countries_and_territories,\n        current_avg = AVG(CASES) OVER(partition by geo_id order by date_rep ROWS BETWEEN 7 PRECEDING AND CURRENT ROW  ),\n        prev_avg = AVG(CASES) OVER(partition by geo_id order by date_rep ROWS BETWEEN 14 PRECEDING AND 7 PRECEDING  )\nfrom ecdc.cases as a\norder by date_rep desc;\nGO\n\nselect  TOP 50 date_rep, continent_exp,\n        current_avg = AVG(CASES) OVER(partition by continent_exp order by date_rep ROWS BETWEEN 7 PRECEDING AND CURRENT ROW  ),\n        prev_avg = AVG(CASES) OVER(partition by continent_exp order by date_rep ROWS BETWEEN 14 PRECEDING AND 7 PRECEDING  )\nfrom ecdc.cases as a\norder by date_rep desc;\nGO",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "master",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}