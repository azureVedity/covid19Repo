{
	"name": "ecdc_covid19_cases_select",
	"properties": {
		"content": {
			"query": "\nSELECT\n    TOP 100 *\nFROM\n    OPENROWSET(\n        BULK 'https://adlsvedity.dfs.core.windows.net/stage/ecdc/cases_deaths.csv',\n        FORMAT = 'CSV',\n        PARSER_VERSION='2.0'\n    ) AS [result]\n\nCREATE EXTERNAL DATA SOURCE ecdc_cases_deaths WITH (\n    LOCATION = 'https://adlsvedity.dfs.core.windows.net/stage/'\n);\n\ndrop EXTERNAL FILE FORMAT CSVfile\n\n\nCREATE EXTERNAL FILE FORMAT csvFile\nWITH (\n    FORMAT_TYPE = DELIMITEDTEXT,\n    FORMAT_OPTIONS (\n      FIELD_TERMINATOR = ',',\n      STRING_DELIMITER = '\"',\n      FIRST_ROW = 2,\n      USE_TYPE_DEFAULT = FALSE,\n      ENCODING = 'UTF8' )\n);         \n\ncreate schema ecdc\n\ngo\n\ndrop external table ecdc.cases_deaths\n\ncreate external table ecdc.cases_deaths (\n    country  varchar(8000),\n    country_code varchar(8000),\n    continent  varchar(8000),\n    population    BIGINT,\n    indicator       varchar(8000),\n    weekly_count BIGINT,\n    year_week VARCHAR(10),\n    rate_14_day    FLOAT,\n    cumulative_count BIGINT,\n    source    varchar(8000)\n) with (\n    data_source= ecdc_cases_deaths,\n    location = 'ecdc/cases_deaths.csv',\n    file_format = csvFile\n);\nGO\n\n\n\nselect top 10  *\nfrom  ecdc.cases_deaths as a\n\n\nselect continent = ISNULL(continent, 'Total'), cases = sum(case when indicator='cases' then weekly_count else 0 end), deaths = sum(case when indicator='deaths' then weekly_count else 0 end)\nfrom  ecdc.cases_deaths as a\ngroup by continent --with rollup\norder by sum(case when indicator='cases' then weekly_count else 0 end) desc\n\nselect top 50 country = ISNULL(country, 'Total'), cases = sum(case when indicator='cases' then weekly_count else 0 end), deaths = sum(case when indicator='deaths' then weekly_count else 0 end)\nfrom  ecdc.cases_deaths as a\nwhere country not like '%total%'\ngroup by country --with rollup\norder by sum(case when indicator='cases' then weekly_count else 0 end) desc\n\nselect country,country_code,continent,population,year_week,sum(case when indicator='cases' then weekly_count else 0 end) cases,sum(case when indicator='deaths' then weekly_count else 0 end) deaths,rate_14_day,cumulative_count,source from  ecdc.cases_deaths  where country not like '%total%' group by country,country_code,continent,population,year_week,rate_14_day,cumulative_count,source\n\nselect year_week week, cases = sum(case when indicator='cases' then weekly_count else 0 end), deaths =  sum(case when indicator='deaths' then weekly_count else 0 end)\nfrom ecdc.cases_deaths as a\nwhere country_code = 'IND'\ngroup by year_week\norder by year_week\n\n\nselect concat(SUBSTRING(year_week, 1, 4),'-', month(DATEADD(wk,cast(SUBSTRING(year_week, 6, 7) as int),concat(SUBSTRING(year_week, 1, 4) , '/01/01')))) month, cases = sum(case when indicator='cases' then weekly_count else 0 end), deaths =  sum(case when indicator='deaths' then weekly_count else 0 end)\nfrom ecdc.cases_deaths as a\nwhere country_code = 'IND'\ngroup by concat(SUBSTRING(year_week, 1, 4),'-', month(DATEADD(wk,cast(SUBSTRING(year_week, 6, 7) as int),concat(SUBSTRING(year_week, 1, 4) , '/01/01'))))\norder by cast (concat(concat(SUBSTRING(year_week, 1, 4),'-', month(DATEADD(wk,cast(SUBSTRING(year_week, 6, 7) as int),concat(SUBSTRING(year_week, 1, 4) , '/01/01')))),'-01') as date)\n\nselect concat(SUBSTRING(year_week, 1, 4),'-', month(DATEADD(wk,cast(SUBSTRING(year_week, 6, 7) as int),concat(SUBSTRING(year_week, 1, 4) , '/01/01')))) month, cases = sum(case when indicator='cases' then weekly_count else 0 end), deaths =  sum(case when indicator='deaths' then weekly_count else 0 end)\nfrom ecdc.cases_deaths as a\nwhere country_code = 'USA'\ngroup by concat(SUBSTRING(year_week, 1, 4),'-', month(DATEADD(wk,cast(SUBSTRING(year_week, 6, 7) as int),concat(SUBSTRING(year_week, 1, 4) , '/01/01'))))\norder by cast (concat(concat(SUBSTRING(year_week, 1, 4),'-', month(DATEADD(wk,cast(SUBSTRING(year_week, 6, 7) as int),concat(SUBSTRING(year_week, 1, 4) , '/01/01')))),'-01') as date)\n\nselect concat(SUBSTRING(year_week, 1, 4),'-', month(DATEADD(wk,cast(SUBSTRING(year_week, 6, 7) as int),concat(SUBSTRING(year_week, 1, 4) , '/01/01')))) month, cases = sum(case when indicator='cases' then weekly_count else 0 end), deaths =  sum(case when indicator='deaths' then weekly_count else 0 end)\nfrom ecdc.cases_deaths as a\nwhere country_code = 'AUS'\ngroup by concat(SUBSTRING(year_week, 1, 4),'-', month(DATEADD(wk,cast(SUBSTRING(year_week, 6, 7) as int),concat(SUBSTRING(year_week, 1, 4) , '/01/01'))))\norder by cast (concat(concat(SUBSTRING(year_week, 1, 4),'-', month(DATEADD(wk,cast(SUBSTRING(year_week, 6, 7) as int),concat(SUBSTRING(year_week, 1, 4) , '/01/01')))),'-01') as date)\n\n--select concat(SUBSTRING('2021-17', 1, 4),'-', month(DATEADD(wk,cast(SUBSTRING('2021-17', 6, 7) as int),concat(SUBSTRING('2021-17', 1, 4) , '/01/01')))) as date1\n\n\nselect country,concat(SUBSTRING(year_week, 1, 4),'-', month(DATEADD(wk,cast(SUBSTRING(year_week, 6, 7) as int),concat(SUBSTRING(year_week, 1, 4) , '/01/01')))) month, cases = sum(case when indicator='cases' then weekly_count else 0 end), deaths =  sum(case when indicator='deaths' then weekly_count else 0 end)\nfrom ecdc.cases_deaths as a\nwhere country not like '%total%'\ngroup by country,concat(SUBSTRING(year_week, 1, 4),'-', month(DATEADD(wk,cast(SUBSTRING(year_week, 6, 7) as int),concat(SUBSTRING(year_week, 1, 4) , '/01/01')))) \norder by sum(case when indicator='cases' then weekly_count else 0 end) desc\n\n\n\n\nselect top 50  *\nfrom ecdc.cases as a;\n\nselect  TOP 10 date_rep, countries_and_territories,\n        cases,\n        prev = LAG(CASES, 7) OVER(partition by geo_id order by date_rep )\nfrom ecdc.cases as a\norder by date_rep desc;\nGO\n\nselect  TOP 10 date_rep, countries_and_territories,\n        current_avg = AVG(CASES) OVER(partition by geo_id order by date_rep ROWS BETWEEN 7 PRECEDING AND CURRENT ROW  ),\n        prev_avg = AVG(CASES) OVER(partition by geo_id order by date_rep ROWS BETWEEN 14 PRECEDING AND 7 PRECEDING  )\nfrom ecdc.cases as a\norder by date_rep desc;\nGO\n\nselect  TOP 50 date_rep, continent_exp,\n        current_avg = AVG(CASES) OVER(partition by continent_exp order by date_rep ROWS BETWEEN 7 PRECEDING AND CURRENT ROW  ),\n        prev_avg = AVG(CASES) OVER(partition by continent_exp order by date_rep ROWS BETWEEN 14 PRECEDING AND 7 PRECEDING  )\nfrom ecdc.cases as a\norder by date_rep desc;\nGO",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "poc_sqldw",
				"poolName": "poc_sqldw"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}